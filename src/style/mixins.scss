@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin respond($media, $max: null) {
  @if $media == "print" {
      @media only print {
          @content;
      }
  } @else if $media == "small-down" {
      @media only screen and (max-width: $medium-breakpoint - 1) {
          @content;
      }
  } @else if $media == "small" {
      @media only screen and (min-width: $small-breakpoint) and (max-width: $medium-breakpoint - 1) {
          @content;
      }
  } @else if $media == "medium-down" {
      @media only screen and (max-width: $large-breakpoint - 1) {
          @content;
      }
  } @else if $media == "medium" {
      @media only screen and (min-width: $medium-breakpoint) and (max-width: $large-breakpoint - 1) {
          @content;
      }
  } @else if $media == "medium-up" {
      @media only screen and (min-width: $medium-breakpoint) {
          @content;
      }
  } @else if $media == "large-down" {
      @media only screen and (max-width: $desktop-breakpoint - 1) {
          @content;
      }
  } @else if $media == "large" {
      @media only screen and (min-width: $large-breakpoint) and (max-width: $desktop-breakpoint - 1) {
          @content;
      }
  } @else if $media == "large-up" {
      @media only screen and (min-width: $large-breakpoint) {
          @content;
      }
  } @else if $media == "desktop" {
      @media only screen and (min-width: $desktop-breakpoint) {
          @content;
      }
  } @else if type-of($media) == number and $max == null {
      @media only screen and (min-width: $media) {
          @content;
      }
  } @else if type-of($media) == number and type-of($max) == number {
      @media only screen and (min-width: $media) and (max-width: $max - 1) {
          @content;
      }
  }
}

@mixin font-size($size: null, $lineheight: null, $breakpoint: null) {
  @if $size != "" and $size != null {
      @if $breakpoint == null {
          font-size: $size;
          font-size: rem($size);
      } @else {
          // Get a font size in VWs that will match the given pixel font-size in the given viewport.
          font-size: $size;
          font-size: calculateVw($size, $breakpoint);
      }
      @if $lineheight != "" and $lineheight != null and unit($size) == unit($lineheight) {
          $calculated-line-height: (strip-units($lineheight) / strip-units($size)) * 1em;
          @include line-height($calculated-line-height);
      }
  }
}




@mixin content-width() {
  box-sizing: border-box;
  margin: auto;
  width: calc(100% - #{$content-width-gutters*2});
  max-width: $max-content-breakpoint;
  /* To remove fluidity in viewports, uncomment this block.
  @include respond(medium-up) {
      width: $medium-breakpoint - $content-width-gutters*2;
  }
  @include respond(large-up) {
      width: $large-breakpoint - $content-width-gutters*2;
  }
  @include respond(desktop) {
      width: $desktop-breakpoint - $content-width-gutters*2;
  }
  */
}
@mixin line-height($size) {
  line-height: $size;
  @if unit($size) == "px" {
      line-height: rem($size);
  }
}
